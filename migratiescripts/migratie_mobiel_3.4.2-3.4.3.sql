SET role oiv_admin;
SET search_path = mobiel, pg_catalog, public;

ALTER TABLE mobiel.werkvoorraad_punt ADD COLUMN bouwlaag_object varchar(50);
ALTER TABLE mobiel.werkvoorraad_lijn ADD COLUMN bouwlaag_object varchar(50);
ALTER TABLE mobiel.werkvoorraad_vlak ADD COLUMN bouwlaag_object varchar(50);

CREATE TABLE mobiel.gt_pk_metadata_table (
	table_schema varchar(32) NOT NULL,
	table_name varchar(32) NOT NULL,
	pk_column varchar(32) NOT NULL,
	pk_column_idx int4 NULL,
	pk_policy varchar(32) NULL,
	pk_sequence varchar(64) NULL,
	CONSTRAINT gt_pk_metadata_table_pk_policy_check CHECK (((pk_policy)::text = ANY (ARRAY[('sequence'::character varying)::text, ('assigned'::character varying)::text, ('autogenerated'::character varying)::text]))),
	CONSTRAINT gt_pk_metadata_table_table_schema_table_name_pk_column_key UNIQUE (table_schema, table_name, pk_column)
);

INSERT INTO mobiel.gt_pk_metadata_table (table_schema, table_name, pk_column, pk_column_idx, pk_policy)
        VALUES ('mobiel', 'symbolen', 'id', 1, 'assigned');
INSERT INTO mobiel.gt_pk_metadata_table (table_schema, table_name, pk_column, pk_column_idx, pk_policy)
        VALUES ('mobiel', 'lijnen', 'id', 1, 'assigned');
INSERT INTO mobiel.gt_pk_metadata_table (table_schema, table_name, pk_column, pk_column_idx, pk_policy)
        VALUES ('mobiel', 'vlakken', 'id', 1, 'assigned');
INSERT INTO mobiel.gt_pk_metadata_table (table_schema, table_name, pk_column, pk_column_idx, pk_policy)
        VALUES ('mobiel', 'labels', 'id', 1, 'assigned');

--LABELS
DROP TABLE IF EXISTS mobiel.label_type;
CREATE TABLE mobiel.label_type (
	gid serial PRIMARY key,
	bron_id int4,
	brontabel varchar(50),
	naam text,
	categorie text,
	symbol_name text,
	"size" int4,
	evenement bool,
	gebouw bool,
	waterongeval bool,
	bluswater bool,
	natuur bool,
	bouwlaag_object varchar(50)
);

INSERT INTO mobiel.label_type
(bron_id, brontabel, naam, categorie, symbol_name, "size", evenement, gebouw, waterongeval, bluswater, natuur, bouwlaag_object)
SELECT id, 'label', naam, 'label', symbol_name, "size", True, True, True, True, True, 'bouwlaag' FROM objecten.label_type;

INSERT INTO mobiel.label_type
(bron_id, brontabel, naam, categorie, symbol_name, "size", evenement, gebouw, waterongeval, bluswater, natuur, bouwlaag_object)
SELECT id, 'label', naam, 'label', symbol_name, size_object, True, True, True, True, True, 'object' FROM objecten.label_type;

CREATE OR REPLACE FUNCTION mobiel.complement_record_label()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
    DECLARE 
    	objectid integer := NULL;
    	bouwlaagid integer := NULL;
    BEGIN 
	    IF (NEW.bouwlaag_object = 'bouwlaag' OR NEW.bouwlaag_id IS NOT NULL) THEN
	    	bouwlaagid := (SELECT b.id FROM (SELECT b.id, b.geom <-> new.geom AS dist FROM objecten.bouwlagen b WHERE b.bouwlaag = NEW.bouwlaag ORDER BY dist LIMIT 1) b);
	    	UPDATE mobiel.werkvoorraad_label SET "size" = sub."size", bouwlaag_id = bouwlaagid
			FROM
			  (
			    SELECT * FROM mobiel.label_type WHERE symbol_name = new.symbol_name AND bouwlaag_object = 'bouwlaag'
			  ) sub
			WHERE werkvoorraad_label.id = NEW.id;
	    ELSE
	    	objectid := (SELECT b.object_id FROM (SELECT b.object_id, b.geom <-> new.geom AS dist FROM objecten.terrein b ORDER BY dist LIMIT 1) b);
	    	UPDATE mobiel.werkvoorraad_label SET "size" = sub."size", object_id = objectid
			FROM
			  (
			    SELECT * FROM mobiel.label_type WHERE symbol_name = new.symbol_name AND bouwlaag_object = 'object'
			  ) sub
			WHERE werkvoorraad_label.id = NEW.id;
	    END IF;
	   RETURN NULL;
    END;
    $function$
;

CREATE OR REPLACE FUNCTION mobiel.funct_label_update()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
    BEGIN 
	    IF NEW.bron = 'oiv' THEN
			INSERT INTO mobiel.werkvoorraad_label (geom, waarden_new, operatie, brontabel, bron_id, bouwlaag_id, omschrijving, rotatie, size, symbol_name, bouwlaag, accepted)
  			VALUES (new.geom, new.waarden_new, 'UPDATE', new.brontabel, old.id, new.bouwlaag_id, new.omschrijving, new.rotatie, new.size, new.symbol_name, new.bouwlaag, false);
  		
			UPDATE mobiel.werkvoorraad_label
			SET geom=NEW.geom, waarden_new=NEW.waarden_new, operatie=NEW.operatie, brontabel=NEW.brontabel, bron_id=old.id, omschrijving=new.omschrijving,
				object_id=NEW.object_id, bouwlaag_id=NEW.bouwlaag_id, rotatie=NEW.rotatie, "size"=NEW.size, symbol_name=NEW.symbol_name, bouwlaag=NEW.bouwlaag
			WHERE werkvoorraad_label.id = NEW.id;
			IF NOT ST_Equals(new.geom, old.geom) THEN
                INSERT INTO mobiel.werkvoorraad_hulplijnen (geom, bron_id, brontabel, bouwlaag) 
                    VALUES (ST_MakeLine(ST_Centroid(old.geom), ST_Centroid(new.geom)), old.id, new.brontabel, new.bouwlaag);
            END IF;
	    ELSE
			UPDATE mobiel.werkvoorraad_label
			SET geom=NEW.geom, waarden_new=NEW.waarden_new, operatie=NEW.operatie, brontabel=NEW.brontabel, bron_id=old.bron_id, omschrijving=new.omschrijving, 
				object_id=NEW.object_id, bouwlaag_id=NEW.bouwlaag_id, rotatie=NEW.rotatie, "size"=NEW.size, symbol_name=NEW.symbol_name, bouwlaag=NEW.bouwlaag
			WHERE werkvoorraad_label.id = NEW.id;
			IF NOT ST_Equals(new.geom, old.geom) THEN
                INSERT INTO mobiel.werkvoorraad_hulplijnen (geom, bron_id, brontabel, bouwlaag) 
                    VALUES (ST_MakeLine(ST_Centroid(old.geom), ST_Centroid(new.geom)), old.bron_id, new.brontabel, new.bouwlaag);
            END IF;
	    END IF;
	    RETURN NULL;
    END;
$function$
;

CREATE OR REPLACE FUNCTION mobiel.funct_label_delete()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
    BEGIN 
	    IF OLD.bron = 'oiv' THEN
			INSERT INTO mobiel.werkvoorraad_label (geom, waarden_new, operatie, brontabel, bron_id, bouwlaag_id, rotatie, size, symbol_name, bouwlaag, accepted)
  			VALUES (old.geom, old.waarden_new, 'DELETE', old.brontabel, old.id, old.bouwlaag_id, old.rotatie, old.size, old.symbol_name, old.bouwlaag, false);
  		
			UPDATE mobiel.werkvoorraad_label
			SET geom=old.geom, waarden_new=old.waarden_new, operatie=old.operatie, brontabel=old.brontabel, bron_id=old.id, 
				object_id=old.object_id, bouwlaag_id=old.bouwlaag_id, rotatie=old.rotatie, "size"=old.size, symbol_name=old.symbol_name, bouwlaag=old.bouwlaag
			WHERE werkvoorraad_label.id = old.id;
	    ELSE
			DELETE FROM mobiel.werkvoorraad_label WHERE (id = OLD.id);
	    END IF;
	    RETURN NULL;
    END;
$function$
;

DROP TABLE IF EXISTS mobiel.werkvoorraad_label;
CREATE TABLE mobiel.werkvoorraad_label (
	id serial4 NOT NULL,
	datum_aangemaakt timestamp NULL DEFAULT now(),
	datum_gewijzigd timestamp NULL,
	geom geometry(point, 28992) NULL,
	waarden_new json NULL,
	operatie varchar(10) NULL,
	brontabel varchar(50) NULL,
	bron_id int4 NULL,
	object_id int4 NULL,
	bouwlaag_id int4 NULL,
	omschrijving text,
	rotatie int4 NULL,
	"size" int4 NULL,
	symbol_name text NULL,
	accepted bool NULL,
	bouwlaag int4 NULL,
	fotografie_id int4 NULL,
	bouwlaag_object varchar(50),
	CONSTRAINT werkvoorraad_label_pkey PRIMARY KEY (id)
);
CREATE INDEX werkvoorraad_label_geom_gist ON mobiel.werkvoorraad_label USING gist (geom);

CREATE TRIGGER trg_set_insert BEFORE
INSERT
    ON
    mobiel.werkvoorraad_label FOR EACH ROW EXECUTE FUNCTION objecten.set_timestamp('datum_aangemaakt');

CREATE TRIGGER trg_set_upd BEFORE
UPDATE
    ON
    mobiel.werkvoorraad_label FOR EACH ROW EXECUTE FUNCTION objecten.set_timestamp('datum_gewijzigd');

CREATE TRIGGER trg_after_insert AFTER
INSERT
    ON
    mobiel.werkvoorraad_label FOR EACH ROW EXECUTE FUNCTION mobiel.complement_record_label();

DROP VIEW IF EXISTS mobiel.labels;
CREATE OR REPLACE VIEW mobiel.labels
AS SELECT row_number() OVER (ORDER BY sub.id) AS id,
    sub.geom,
    sub.waarden_new,
    sub.operatie,
    sub.brontabel,
    sub.bron_id,
    sub.object_id,
    sub.bouwlaag_id,
    sub.omschrijving,
    sub.rotatie,
    sub.size,
    sub.symbol_name,
    sub.bouwlaag,
    sub.bron,
    sub.binnen_buiten
FROM ( SELECT id, geom, waarden_new, operatie, brontabel, bron_id, object_id, bouwlaag_id, omschrijving, rotatie, "size", symbol_name, bouwlaag,
    		''::text AS binnen_buiten, 'werkvoorraad'::text AS bron
	FROM mobiel.werkvoorraad_label
UNION ALL
	SELECT l.id, l.geom, NULL, '', 'label', l.id, 
			NULL AS object_id, l.bouwlaag_id, l.omschrijving, l.rotatie, lt."size", lt.symbol_name, b.bouwlaag,
				'bouwlaag'::text AS binnen_buiten, 'oiv'::text AS bron
	FROM objecten.label l
	inner join objecten.bouwlagen b on l.bouwlaag_id = b.id
	INNER JOIN objecten.label_type lt ON l.soort = lt.naam
    WHERE l.bouwlaag_id IS NOT NULL AND l.datum_deleted IS NULL
UNION ALL
	SELECT l.id, geom, NULL, '', 'label', l.id,
			object_id, NULL AS bouwlaag_id, omschrijving, rotatie, lt."size", lt.symbol_name, NULL AS bouwlaag,
				'object'::text AS binnen_buiten, 'oiv'::text AS bron
	FROM objecten.label l
	INNER JOIN objecten.label_type lt ON l.soort = lt.naam
    WHERE l.object_id IS NOT NULL AND l.datum_deleted IS NULL
) sub;

CREATE TRIGGER trg_labels_upd INSTEAD OF
UPDATE
    ON
    mobiel.labels FOR EACH ROW EXECUTE FUNCTION mobiel.funct_label_update();

CREATE TRIGGER trg_labels_del INSTEAD OF
DELETE
    ON
    mobiel.labels  FOR EACH ROW EXECUTE FUNCTION mobiel.funct_label_delete();

CREATE OR REPLACE RULE labels_ins AS
    ON INSERT TO mobiel.labels DO INSTEAD  
	INSERT INTO mobiel.werkvoorraad_label (geom, waarden_new, operatie, brontabel, bron_id, bouwlaag_id,
										 omschrijving, rotatie, size, symbol_name, bouwlaag, accepted, bouwlaag_object)
  VALUES (new.geom, new.waarden_new, 'INSERT'::character varying, new.brontabel, new.bron_id, new.bouwlaag_id, 
  			new.omschrijving, new.rotatie, new.size, new.symbol_name, new.bouwlaag, false, new.binnen_buiten);

CREATE OR REPLACE VIEW mobiel.categorie_labels AS 
	SELECT DISTINCT label_type.categorie, label_type.brontabel, bouwlaag_object FROM mobiel.label_type;

--SYMBOLEN
CREATE TABLE mobiel.punten_type (
	gid serial PRIMARY key,
	bron_id int4,
	brontabel varchar(50),
	naam text,
	categorie text,
	symbol_name text,
	"size" int4,
	size_object int4,
	evenement bool,
	gebouw bool,
	waterongeval bool,
	bluswater bool,
	natuur bool,
	bouwlaag_object varchar(50)
);

TRUNCATE TABLE mobiel.punten_type;

INSERT INTO mobiel.punten_type
(bron_id, brontabel, naam, categorie, symbol_name, "size", evenement, gebouw, waterongeval, bluswater, natuur, bouwlaag_object)
SELECT id, 'afw_binnendekking', naam, 'algemeen', symbol_name, "size", True, True, True, True, True, 'bouwlaag' FROM objecten.afw_binnendekking_type;

INSERT INTO mobiel.punten_type
(bron_id, brontabel, naam, categorie, symbol_name, "size", evenement, gebouw, waterongeval, bluswater, natuur, bouwlaag_object)
SELECT id, 'dreiging', naam, 'gevaar', symbol_name, "size", False, True, False, False, False, 'bouwlaag' FROM objecten.dreiging_type;

INSERT INTO mobiel.punten_type
(bron_id, brontabel, naam, categorie, symbol_name, "size", evenement, gebouw, waterongeval, bluswater, natuur, bouwlaag_object)
SELECT id, 'dreiging', naam, 'gevaar', symbol_name, "size_object", True, True, False, False, False, 'object' FROM objecten.dreiging_type;

INSERT INTO mobiel.punten_type
(bron_id, brontabel, naam, categorie, symbol_name, "size", evenement, gebouw, waterongeval, bluswater, natuur, bouwlaag_object)
SELECT id, 'ingang', naam, 'ingang', symbol_name, "size", True, True, False, False, False, 'bouwlaag' FROM objecten.ingang_type;

INSERT INTO mobiel.punten_type
(bron_id, brontabel, naam, categorie, symbol_name, "size", evenement, gebouw, waterongeval, bluswater, natuur, bouwlaag_object)
SELECT id, 'ingang', naam, 'ingang', symbol_name, "size_object", True, True, True, False, True, 'object' FROM objecten.ingang_type;

INSERT INTO mobiel.punten_type
(bron_id, brontabel, naam, categorie, symbol_name, "size", evenement, gebouw, waterongeval, bluswater, natuur, bouwlaag_object)
SELECT id, 'opstelplaats', naam, 'opstelplaats', symbol_name, "size", True, True, False, False, False, 'object' FROM objecten.opstelplaats_type;

INSERT INTO mobiel.punten_type
(bron_id, brontabel, naam, categorie, symbol_name, "size", evenement, gebouw, waterongeval, bluswater, natuur, bouwlaag_object)
SELECT id, 'veiligh_install', naam, 'algemeen', symbol_name, "size", True, True, False, False, False, 'bouwlaag' FROM objecten.veiligh_install_type;

INSERT INTO mobiel.punten_type
(bron_id, brontabel, naam, categorie, symbol_name, "size", evenement, gebouw, waterongeval, bluswater, natuur, bouwlaag_object)
SELECT id, 'veiligh_ruimtelijk', naam, 'algemeen', symbol_name, "size", True, True, True, False, True, 'object' FROM objecten.veiligh_ruimtelijk_type;

INSERT INTO mobiel.punten_type
(bron_id, brontabel, naam, categorie, symbol_name, "size", evenement, gebouw, waterongeval, bluswater, natuur, bouwlaag_object)
SELECT id, 'sleutelkluis', naam, 'ingang', symbol_name, "size", False, True, True, False, True , 'bouwlaag' FROM objecten.sleutelkluis_type;

INSERT INTO mobiel.punten_type
(bron_id, brontabel, naam, categorie, symbol_name, "size", evenement, gebouw, waterongeval, bluswater, natuur, bouwlaag_object)
SELECT id, 'sleutelkluis', naam, 'ingang', symbol_name, "size_object", False, True, True, False, True, 'object' FROM objecten.sleutelkluis_type;

INSERT INTO mobiel.punten_type
(bron_id, brontabel, naam, categorie, symbol_name, "size", evenement, gebouw, waterongeval, bluswater, natuur, bouwlaag_object)
SELECT id, 'points_of_interest', naam, 'poi', symbol_name, "size", True, True, True, False, True, 'object' FROM objecten.points_of_interest_type;

CREATE OR REPLACE FUNCTION mobiel.complement_record_punt()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
    DECLARE 
    	objectid integer := NULL;
    	bouwlaagid integer := NULL;
    BEGIN 
	    IF (NEW.bouwlaag_object = 'bouwlaag' OR NEW.bouwlaag_id IS NOT NULL) THEN
	    	bouwlaagid := (SELECT b.id FROM (SELECT b.id, b.geom <-> new.geom AS dist FROM objecten.bouwlagen b WHERE b.bouwlaag = NEW.bouwlaag ORDER BY dist LIMIT 1) b);
	    	UPDATE mobiel.werkvoorraad_punt SET "size" = sub."size", bouwlaag_id = bouwlaagid
			FROM
			  (
			    SELECT * FROM mobiel.punten_type WHERE symbol_name = new.symbol_name AND bouwlaag_object = 'bouwlaag'
			  ) sub
			WHERE werkvoorraad_punt.id = NEW.id;
	    ELSE
	    	objectid := (SELECT b.object_id FROM (SELECT b.object_id, b.geom <-> new.geom AS dist FROM objecten.terrein b ORDER BY dist LIMIT 1) b);
	    	UPDATE mobiel.werkvoorraad_punt SET "size" = sub."size", object_id = objectid
			FROM
			  (
			    SELECT * FROM mobiel.punten_type WHERE symbol_name = new.symbol_name AND bouwlaag_object = 'object'
			  ) sub
			WHERE werkvoorraad_punt.id = NEW.id;
	    END IF;
	   RETURN NULL;
    END;
    $function$
;

CREATE OR REPLACE FUNCTION mobiel.funct_symbol_update()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
    BEGIN 
	    IF NEW.bron = 'oiv' THEN
			INSERT INTO mobiel.werkvoorraad_punt (geom, waarden_new, operatie, brontabel, bron_id, bouwlaag_id, rotatie, size, symbol_name, bouwlaag, accepted)
  			VALUES (new.geom, new.waarden_new, 'UPDATE', new.brontabel, old.id, new.bouwlaag_id, new.rotatie, new.size, new.symbol_name, new.bouwlaag, false);
  		
			UPDATE mobiel.werkvoorraad_punt
			SET geom=NEW.geom, waarden_new=NEW.waarden_new, operatie=NEW.operatie, brontabel=NEW.brontabel, bron_id=old.id, 
				object_id=NEW.object_id, bouwlaag_id=NEW.bouwlaag_id, rotatie=NEW.rotatie, "size"=NEW.size, symbol_name=NEW.symbol_name, bouwlaag=NEW.bouwlaag
			WHERE werkvoorraad_punt.id = NEW.id;
			IF NOT ST_Equals(new.geom, old.geom) THEN
                INSERT INTO mobiel.werkvoorraad_hulplijnen (geom, bron_id, brontabel, bouwlaag) 
                    VALUES (ST_MakeLine(ST_Centroid(old.geom), ST_Centroid(new.geom)), old.id, new.brontabel, new.bouwlaag);
			END IF;
	    ELSE
			UPDATE mobiel.werkvoorraad_punt
			SET geom=NEW.geom, waarden_new=NEW.waarden_new, operatie='UPDATE', brontabel=NEW.brontabel, bron_id=old.bron_id, 
				object_id=NEW.object_id, bouwlaag_id=NEW.bouwlaag_id, rotatie=NEW.rotatie, "size"=NEW.size, symbol_name=NEW.symbol_name, bouwlaag=NEW.bouwlaag
			WHERE werkvoorraad_punt.id = NEW.id;
			IF NOT ST_Equals(new.geom, old.geom) THEN
                INSERT INTO mobiel.werkvoorraad_hulplijnen (geom, bron_id, brontabel, bouwlaag) 
                    VALUES (ST_MakeLine(ST_Centroid(old.geom), ST_Centroid(new.geom)), old.bron_id, new.brontabel, new.bouwlaag);
			END IF;
	    END IF;
	    RETURN NULL;
    END;
$function$
;

CREATE OR REPLACE FUNCTION mobiel.funct_symbol_delete()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
    BEGIN 
	    IF OLD.bron = 'oiv' THEN
			INSERT INTO mobiel.werkvoorraad_punt (geom, waarden_new, operatie, brontabel, bron_id, bouwlaag_id, rotatie, size, symbol_name, bouwlaag, accepted)
  			VALUES (old.geom, old.waarden_new, 'DELETE', old.brontabel, old.id, old.bouwlaag_id, old.rotatie, old.size, old.symbol_name, old.bouwlaag, false);
  		
			UPDATE mobiel.werkvoorraad_punt
			SET geom=old.geom, waarden_new=old.waarden_new, operatie=old.operatie, brontabel=old.brontabel, bron_id=old.id, 
				object_id=old.object_id, bouwlaag_id=old.bouwlaag_id, rotatie=old.rotatie, "size"=old.size, symbol_name=old.symbol_name, bouwlaag=old.bouwlaag
			WHERE werkvoorraad_punt.id = old.id;
	    ELSE
			DELETE FROM mobiel.werkvoorraad_punt WHERE (id = OLD.id);
	    END IF;
	    RETURN NULL;
    END;
$function$
;

CREATE or replace TRIGGER trg_set_insert BEFORE
INSERT
    ON
    mobiel.werkvoorraad_punt FOR EACH ROW EXECUTE FUNCTION objecten.set_timestamp('datum_aangemaakt');

CREATE or replace TRIGGER trg_set_upd BEFORE
INSERT
    ON
    mobiel.werkvoorraad_punt FOR EACH ROW EXECUTE FUNCTION objecten.set_timestamp('datum_gewijzigd');
    
CREATE or replace TRIGGER trg_after_insert AFTER
INSERT
    ON
    mobiel.werkvoorraad_punt FOR EACH ROW EXECUTE FUNCTION mobiel.complement_record_punt();

CREATE OR REPLACE VIEW mobiel.symbolen
AS SELECT row_number() OVER (ORDER BY sub.id) AS id,
    sub.geom,
    sub.waarden_new,
    sub.operatie,
    sub.brontabel,
    sub.bron_id,
    sub.object_id,
    sub.bouwlaag_id,
    sub.rotatie,
    sub.size,
    sub.symbol_name,
    sub.bouwlaag,
    sub.bron,
    sub.binnen_buiten
FROM ( 
  SELECT id, geom, waarden_new, operatie, brontabel, bron_id, object_id, bouwlaag_id, rotatie, size, symbol_name, bouwlaag,
  	''::text AS binnen_buiten, 'werkvoorraad'::text AS bron
  FROM mobiel.werkvoorraad_punt
UNION ALL
  SELECT v.id, v.geom, row_to_json(( SELECT d.*::record AS d FROM (SELECT v.label, v.bijzonderheid) d)) AS waarden_new,
    '' AS operatie, 'veiligh_install' AS brontabel, v.id AS bron_id, NULL AS object_id, v.bouwlaag_id, v.rotatie, vt.size, vt.symbol_name,
    b.bouwlaag, 'bouwlaag' AS binnen_buiten, 'oiv' AS bron
  FROM objecten.veiligh_install v
  INNER JOIN objecten.bouwlagen b ON v.bouwlaag_id = b.id
  INNER JOIN objecten.veiligh_install_type vt ON v.veiligh_install_type_id = vt.id
  WHERE v.datum_deleted IS NULL
UNION ALL
  SELECT v.id, v.geom, row_to_json(( SELECT d.*::record AS d FROM (SELECT v.label, v.bijzonderheid) d)) AS waarden_new,
    '' AS operatie, 'veiligh_ruimtelijk' AS brontabel, v.id AS bron_id, v.object_id, NULL AS bouwlaag_id, v.rotatie, vt.size, vt.symbol_name,
    NULL AS bouwlaag, 'object' AS binnen_buiten, 'oiv' AS bron
  FROM objecten.veiligh_ruimtelijk v
  INNER JOIN objecten.veiligh_ruimtelijk_type vt ON v.veiligh_ruimtelijk_type_id = vt.id
  WHERE v.datum_deleted IS NULL
UNION ALL
  SELECT v.id, v.geom, row_to_json(( SELECT d.*::record AS d FROM (SELECT v.label, v.omschrijving) d)) AS waarden_new,
    '' AS operatie, 'dreiging' AS brontabel, v.id AS bron_id, NULL AS object_id, v.bouwlaag_id, v.rotatie, vt.size, vt.symbol_name,
	b.bouwlaag, 'bouwlaag' AS binnen_buiten, 'oiv' AS bron
  FROM objecten.dreiging v
  INNER JOIN objecten.bouwlagen b ON v.bouwlaag_id = b.id
  INNER JOIN objecten.dreiging_type vt ON v.dreiging_type_id = vt.id
  WHERE v.bouwlaag_id IS NOT NULL AND v.datum_deleted IS NULL
UNION ALL
  SELECT v.id, v.geom, row_to_json(( SELECT d.*::record AS d FROM (SELECT v.label, v.omschrijving) d)) AS waarden_new,
    '' AS operatie, 'dreiging' AS brontabel, v.id AS bron_id, v.object_id, NULL AS bouwlaag_id, v.rotatie, vt.size, vt.symbol_name,
	NULL AS bouwlaag, 'object' AS binnen_buiten, 'oiv' AS bron
  FROM objecten.dreiging v
  INNER JOIN objecten.dreiging_type vt ON v.dreiging_type_id = vt.id
  WHERE v.object_id IS NOT NULL AND v.datum_deleted IS NULL
UNION ALL
  SELECT v.id, v.geom, row_to_json(( SELECT d.*::record AS d FROM (SELECT v.label, v.handelingsaanwijzing) d)) AS waarden_new,
    '' AS operatie, 'afw_binnendekking' AS brontabel, v.id AS bron_id, NULL AS object_id, v.bouwlaag_id, v.rotatie, vt.size, vt.symbol_name,
    b.bouwlaag, 'bouwlaag' AS binnen_buiten, 'oiv' AS bron
  FROM objecten.afw_binnendekking v
  INNER JOIN objecten.bouwlagen b ON v.bouwlaag_id = b.id
  INNER JOIN objecten.afw_binnendekking_type vt ON v.soort = vt.naam
  WHERE v.datum_deleted IS NULL
UNION ALL
  SELECT v.id, v.geom, row_to_json(( SELECT d.*::record AS d FROM (SELECT v.label, v.belemmering, v.voorzieningen) d)) AS waarden_new,
    '' AS operatie, 'ingang' AS brontabel, v.id AS bron_id, NULL AS object_id, v.bouwlaag_id, v.rotatie, vt.size, vt.symbol_name,
    b.bouwlaag, 'bouwlaag' AS binnen_buiten, 'oiv' AS bron
  FROM objecten.ingang v
  INNER JOIN objecten.bouwlagen b ON v.bouwlaag_id = b.id
  INNER JOIN objecten.ingang_type vt ON v.ingang_type_id = vt.id
  WHERE v.bouwlaag_id IS NOT NULL AND v.datum_deleted IS NULL
UNION ALL
  SELECT v.id, v.geom, row_to_json(( SELECT d.*::record AS d FROM (SELECT v.label, v.belemmering, v.voorzieningen) d)) AS waarden_new,
    '' AS operatie, 'ingang' AS brontabel, v.id AS bron_id, v.object_id, NULL AS bouwlaag_id, v.rotatie, vt.size, vt.symbol_name,
    NULL AS bouwlaag, 'object' AS binnen_buiten, 'oiv' AS bron
  FROM objecten.ingang v
  INNER JOIN objecten.ingang_type vt ON v.ingang_type_id = vt.id
  WHERE v.object_id IS NOT NULL AND v.datum_deleted IS NULL
UNION ALL
  SELECT v.id, v.geom, row_to_json(( SELECT d.*::record AS d FROM (SELECT v.label) d)) AS waarden_new,
    '' AS operatie, 'opstelplaats' AS brontabel, v.id AS bron_id, v.object_id, NULL AS bouwlaag_id, v.rotatie, vt.size, vt.symbol_name,
    NULL AS bouwlaag, 'object' AS binnen_buiten, 'oiv' AS bron
  FROM objecten.opstelplaats v
  INNER JOIN objecten.opstelplaats_type vt ON v.soort = vt.naam
  WHERE v.datum_deleted IS NULL
UNION ALL
  SELECT v.id, v.geom, row_to_json(( SELECT d.*::record AS d FROM (SELECT v.label, v.aanduiding_locatie) d)) AS waarden_new,
    '' AS operatie, 'sleutelkluis' AS brontabel, v.id AS bron_id, NULL AS object_id, i.bouwlaag_id, v.rotatie, vt.size, vt.symbol_name,
    b.bouwlaag, 'bouwlaag' AS binnen_buiten, 'oiv' AS bron
  FROM objecten.sleutelkluis v
  INNER JOIN objecten.ingang i ON v.ingang_id = i.id
  INNER JOIN objecten.bouwlagen b ON i.bouwlaag_id = b.id
  INNER JOIN objecten.sleutelkluis_type vt ON v.sleutelkluis_type_id = vt.id
  WHERE i.bouwlaag_id IS NOT NULL AND v.datum_deleted IS NULL
UNION ALL
  SELECT v.id, v.geom, row_to_json(( SELECT d.*::record AS d FROM (SELECT v.label, v.aanduiding_locatie) d)) AS waarden_new,
    '' AS operatie, 'sleutelkluis' AS brontabel, v.id AS bron_id, i.object_id, NULL AS bouwlaag_id, v.rotatie, vt.size, vt.symbol_name,
    NULL AS bouwlaag, 'object' AS binnen_buiten, 'oiv' AS bron
  FROM objecten.sleutelkluis v
  INNER JOIN objecten.ingang i ON v.ingang_id = i.id
  INNER JOIN objecten.sleutelkluis_type vt ON v.sleutelkluis_type_id = vt.id
  WHERE i.object_id IS NOT NULL AND v.datum_deleted IS NULL
UNION ALL
  SELECT v.id, v.geom, row_to_json(( SELECT d.*::record AS d FROM (SELECT v.label, v.bijzonderheid) d)) AS waarden_new,
    '' AS operatie, 'points_of_interest' AS brontabel, v.id AS bron_id, v.object_id, NULL AS bouwlaag_id, v.rotatie, vt.size, vt.symbol_name,
    NULL AS bouwlaag, 'object' AS binnen_buiten, 'oiv' AS bron
  FROM objecten.points_of_interest v
  INNER JOIN objecten.points_of_interest_type vt ON v.points_of_interest_type_id = vt.id
  WHERE v.object_id IS NOT NULL AND v.datum_deleted IS NULL
) sub;

CREATE RULE symbolen_ins AS
    ON INSERT TO mobiel.symbolen DO INSTEAD  
  INSERT INTO mobiel.werkvoorraad_punt (geom, waarden_new, operatie, brontabel, bron_id, bouwlaag_id, rotatie, size, symbol_name, bouwlaag, accepted, bouwlaag_object)
  VALUES (new.geom, new.waarden_new, 'INSERT'::character varying, new.brontabel, new.bron_id, new.bouwlaag_id, new.rotatie, new.size, new.symbol_name, new.bouwlaag, false, new.binnen_buiten);

CREATE TRIGGER trg_symbolen_del INSTEAD OF
DELETE
    ON
    mobiel.symbolen  FOR EACH ROW EXECUTE FUNCTION mobiel.funct_symbol_delete();

CREATE TRIGGER trg_symbolen_upd INSTEAD OF
UPDATE
    ON
    mobiel.symbolen FOR EACH ROW EXECUTE FUNCTION mobiel.funct_symbol_update();

CREATE OR REPLACE VIEW mobiel.categorie_punten
AS SELECT DISTINCT punten_type.categorie, punten_type.brontabel, punten_type.bouwlaag_object FROM mobiel.punten_type;

--LIJNEN
CREATE TABLE mobiel.lijnen_type (
	gid serial PRIMARY key,
	bron_id int4 NULL,
	brontabel varchar(50) NULL,
	naam text NULL,
	categorie text NULL,
	evenement bool NULL,
	gebouw bool NULL,
	waterongeval bool NULL,
	bluswater bool NULL,
	natuur bool NULL,
	bouwlaag_object varchar(50)
);

INSERT INTO mobiel.lijnen_type (bron_id, brontabel, naam, categorie, gebouw, bouwlaag_object)
SELECT id, 'veiligh_bouwk', naam, 'algemeen', True, 'bouwlaag' FROM objecten.veiligh_bouwk_type;

INSERT INTO mobiel.lijnen_type (bron_id, brontabel, naam, categorie, evenement, gebouw, natuur, waterongeval, bouwlaag_object)
SELECT id, 'bereikbaarheid', naam, 'bereikbaarheid', True, True, True, True, 'object' FROM objecten.bereikbaarheid_type;

CREATE OR REPLACE FUNCTION mobiel.complement_record_lijn()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
    DECLARE 
    	objectid integer := NULL;
    	bouwlaagid integer := NULL;
    BEGIN 
	    IF (NEW.bouwlaag_object = 'bouwlaag' OR NEW.bouwlaag_id IS NOT NULL) THEN
	    	bouwlaagid := (SELECT b.id FROM (SELECT b.id, b.geom <-> new.geom AS dist FROM objecten.bouwlagen b WHERE b.bouwlaag = NEW.bouwlaag ORDER BY dist LIMIT 1) b);
	    ELSE
	    	objectid := (SELECT b.object_id FROM (SELECT b.object_id, b.geom <-> new.geom AS dist FROM objecten.terrein b ORDER BY dist LIMIT 1) b);
	    END IF;
		UPDATE mobiel.werkvoorraad_lijn SET object_id = objectid, bouwlaag_id = bouwlaagid
		WHERE werkvoorraad_lijn.id = NEW.id;
        RETURN NEW;
    END;
    $function$
;

CREATE OR REPLACE FUNCTION mobiel.funct_lijn_update()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
    BEGIN 
	    IF NEW.bron = 'oiv' THEN
			INSERT INTO mobiel.werkvoorraad_lijn (geom, waarden_new, operatie, brontabel, bron_id, bouwlaag_id, symbol_name, bouwlaag, accepted)
  			VALUES (new.geom, new.waarden_new, 'UPDATE', new.brontabel, old.bron_id, new.bouwlaag_id, new.symbol_name, new.bouwlaag, false);
  		
			UPDATE mobiel.werkvoorraad_lijn
			SET geom=NEW.geom, waarden_new=NEW.waarden_new, operatie=NEW.operatie, brontabel=NEW.brontabel, bron_id=old.bron_id, 
				object_id=NEW.object_id, bouwlaag_id=NEW.bouwlaag_id, symbol_name=NEW.symbol_name, bouwlaag=NEW.bouwlaag
			WHERE werkvoorraad_lijn.id = NEW.id;
			IF NOT ST_Equals(new.geom, old.geom) THEN
                INSERT INTO mobiel.werkvoorraad_hulplijnen (geom, bron_id, brontabel, bouwlaag) 
                    VALUES (ST_MakeLine(ST_Centroid(old.geom), ST_Centroid(new.geom)), old.bron_id, new.brontabel, new.bouwlaag);
			END IF;
	    ELSE
			UPDATE mobiel.werkvoorraad_lijn
			SET geom=NEW.geom, waarden_new=NEW.waarden_new, operatie=NEW.operatie, brontabel=NEW.brontabel, bron_id=old.bron_id, 
				object_id=NEW.object_id, bouwlaag_id=NEW.bouwlaag_id, symbol_name=NEW.symbol_name, bouwlaag=NEW.bouwlaag
			WHERE werkvoorraad_lijn.id = NEW.id;
			IF NOT ST_Equals(new.geom, old.geom) THEN
                INSERT INTO mobiel.werkvoorraad_hulplijnen (geom, bron_id, brontabel, bouwlaag) 
                    VALUES (ST_MakeLine(ST_Centroid(old.geom), ST_Centroid(new.geom)), old.bron_id, new.brontabel, new.bouwlaag);
			END IF;
	    END IF;
	    RETURN NULL;
    END;
$function$
;

CREATE OR REPLACE FUNCTION mobiel.funct_lijn_delete()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
    BEGIN 
	    IF OLD.bron = 'oiv' THEN
			INSERT INTO mobiel.werkvoorraad_lijn (geom, waarden_new, operatie, brontabel, bron_id, bouwlaag_id, symbol_name, bouwlaag, accepted)
  			VALUES (old.geom, old.waarden_new, 'DELETE', old.brontabel, old.id, old.bouwlaag_id, old.symbol_name, old.bouwlaag, false);
  		
			UPDATE mobiel.werkvoorraad_lijn
			SET geom=old.geom, waarden_new=old.waarden_new, operatie=old.operatie, brontabel=old.brontabel, bron_id=old.id, 
				object_id=old.object_id, bouwlaag_id=old.bouwlaag_id, symbol_name=old.symbol_name, bouwlaag=old.bouwlaag
			WHERE werkvoorraad_lijn.id = old.id;
	    ELSE
			DELETE FROM mobiel.werkvoorraad_lijn WHERE (id = OLD.id);
	    END IF;
	    RETURN NULL;
    END;
$function$
;

CREATE or replace TRIGGER trg_set_insert BEFORE
INSERT
    ON
    mobiel.werkvoorraad_lijn FOR EACH ROW EXECUTE FUNCTION objecten.set_timestamp('datum_aangemaakt');

CREATE or replace TRIGGER trg_set_upd BEFORE
INSERT
    ON
    mobiel.werkvoorraad_lijn FOR EACH ROW EXECUTE FUNCTION objecten.set_timestamp('datum_gewijzigd');
    
CREATE or replace TRIGGER trg_after_insert AFTER
INSERT
    ON
    mobiel.werkvoorraad_lijn FOR EACH ROW EXECUTE FUNCTION mobiel.complement_record_lijn();

CREATE OR REPLACE VIEW mobiel.lijnen
AS SELECT row_number() OVER (ORDER BY sub.id) AS id,
    sub.geom,
    sub.waarden_new,
    sub.operatie,
    sub.brontabel,
    sub.bron_id,
    sub.object_id,
    sub.bouwlaag_id,
    sub.symbol_name,
    sub.bouwlaag,
    sub.bron,
    sub.binnen_buiten
   FROM ( 
      SELECT id, geom, waarden_new, operatie, brontabel, bron_id, object_id, bouwlaag_id, symbol_name,
            bouwlaag, 'werkvoorraad'::text AS bron, ''::text AS binnen_buiten
      FROM mobiel.werkvoorraad_lijn
    UNION ALL
      SELECT b.id, b.geom, row_to_json(( SELECT d.*::record AS d FROM ( SELECT b.label, b.obstakels, b.wegafzetting) d)) AS waarden_new,
            '' AS operatie, 'bereikbaarheid' AS brontabel, b.id AS bron_id, b.object_id, NULL AS bouwlaag_id, b.soort AS symbol_name,
            NULL AS bouwlaag, 'oiv'::text AS bron, 'object'::text AS binnen_buiten
      FROM objecten.bereikbaarheid b
      INNER JOIN objecten.bereikbaarheid_type bt ON b.soort::text = bt.naam::text
      WHERE b.datum_deleted IS NULL
    UNION ALL
      SELECT b.id, b.geom, row_to_json(( SELECT d.*::record AS d FROM ( SELECT b.label, b.bijzonderheden) d)) AS waarden_new,
            '' AS operatie, 'gebiedsgerichte_aanpak' AS brontabel, b.id AS bron_id, b.object_id, NULL AS bouwlaag_id, b.soort AS symbol_name,
            NULL AS bouwlaag, 'oiv'::text AS bron, 'object'::text AS binnen_buiten
      FROM objecten.gebiedsgerichte_aanpak b
      INNER JOIN objecten.gebiedsgerichte_aanpak_type bt ON b.soort::text = bt.naam::text
      WHERE b.datum_deleted IS NULL
    UNION ALL
      SELECT b.id, b.geom, row_to_json(( SELECT d.*::record AS d FROM ( SELECT b.omschrijving) d)) AS waarden_new,
            '' AS operatie, 'isolijnen' AS brontabel, b.id AS bron_id, b.object_id, NULL AS bouwlaag_id, hoogte::text AS symbol_name,
            NULL AS bouwlaag, 'oiv'::text AS bron, 'object'::text AS binnen_buiten
      FROM objecten.isolijnen b
      WHERE b.datum_deleted IS NULL
    UNION ALL
      SELECT b.id, b.geom, NULL::json AS waarden_new,  '' AS operatie, 'veiligh_bouwk' AS brontabel, b.id AS bron_id,
            NULL AS object_id, b.bouwlaag_id, b.soort AS symbol_name, bl.bouwlaag, 'oiv' AS bron, 'bouwlaag' AS binnen_buiten
      FROM objecten.veiligh_bouwk b
      inner join objecten.bouwlagen bl on b.bouwlaag_id = bl.id
      INNER JOIN objecten.veiligh_bouwk_type bt ON b.soort::text = bt.naam::text
      WHERE b.datum_deleted IS NULL
  ) sub;


CREATE OR REPLACE RULE lijnen_ins AS
    ON INSERT TO mobiel.lijnen DO INSTEAD  INSERT INTO mobiel.werkvoorraad_lijn (geom, waarden_new, operatie, brontabel, bron_id, object_id, bouwlaag_id, symbol_name, bouwlaag, accepted, bouwlaag_object)
  VALUES (new.geom, new.waarden_new, 'INSERT'::character varying, new.brontabel, new.bron_id, new.object_id, new.bouwlaag_id, new.symbol_name, new.bouwlaag, FALSE, NEW.binnen_buiten);

CREATE TRIGGER trg_lijnen_del INSTEAD OF
DELETE
    ON
    mobiel.lijnen FOR EACH ROW EXECUTE FUNCTION mobiel.funct_lijn_delete();

CREATE TRIGGER trg_lijnen_upd INSTEAD OF
UPDATE
    ON
    mobiel.lijnen FOR EACH ROW EXECUTE FUNCTION mobiel.funct_lijn_update();

CREATE OR REPLACE VIEW mobiel.categorie_lijnen
AS SELECT DISTINCT lijnen_type.categorie, lijnen_type.brontabel, bouwlaag_object FROM mobiel.lijnen_type;

--VLAKKEN
CREATE TABLE mobiel.vlakken_type (
	gid serial PRIMARY key,
	bron_id int4 NULL,
	brontabel varchar(50) NULL,
	naam text NULL,
	categorie text NULL,
	symbol_name text NULL,
	evenement bool NULL,
	gebouw bool NULL,
	waterongeval bool NULL,
	bluswater bool NULL,
	natuur bool NULL,
	bouwlaag_object varchar(50)
);

INSERT INTO mobiel.vlakken_type (bron_id, brontabel, naam, categorie, gebouw, bouwlaag_object)
SELECT id, 'ruimten', naam, 'ruimten', True, 'bouwlaag' FROM objecten.ruimten_type;

INSERT INTO mobiel.vlakken_type (bron_id, brontabel, naam, categorie, gebouw, evenement, natuur, bluswater, bouwlaag_object)
SELECT id, 'sectoren', naam, 'sectoren', True, True, True, True, 'object' FROM objecten.sectoren_type;

CREATE OR REPLACE FUNCTION mobiel.complement_record_vlak()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
    DECLARE 
    	objectid integer := NULL;
    	bouwlaagid integer := NULL;
    BEGIN 
	    IF (NEW.bouwlaag_object = 'bouwlaag' OR NEW.bouwlaag_id IS NOT NULL) THEN
	    	bouwlaagid := (SELECT b.id FROM (SELECT b.id, b.geom <-> new.geom AS dist FROM objecten.bouwlagen b WHERE b.bouwlaag = NEW.bouwlaag ORDER BY dist LIMIT 1) b);
	    ELSE
	    	objectid := (SELECT b.object_id FROM (SELECT b.object_id, b.geom <-> new.geom AS dist FROM objecten.terrein b ORDER BY dist LIMIT 1) b);
	    END IF;
		UPDATE mobiel.werkvoorraad_vlak SET object_id = objectid, bouwlaag_id = bouwlaagid 
		WHERE werkvoorraad_vlak.id = NEW.id;
        RETURN NEW;
    END;
    $function$
;

CREATE OR REPLACE FUNCTION mobiel.funct_vlak_update()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
    BEGIN 
	    IF NEW.bron = 'oiv' THEN
			INSERT INTO mobiel.werkvoorraad_vlak (geom, waarden_new, operatie, brontabel, bron_id, bouwlaag_id, symbol_name, bouwlaag, accepted)
  			VALUES (new.geom, new.waarden_new, 'UPDATE', new.brontabel, old.bron_id, new.bouwlaag_id, new.symbol_name, new.bouwlaag, false);
  		
			UPDATE mobiel.werkvoorraad_vlak
			SET geom=NEW.geom, waarden_new=NEW.waarden_new, operatie=NEW.operatie, brontabel=NEW.brontabel, bron_id=old.bron_id, 
				object_id=NEW.object_id, bouwlaag_id=NEW.bouwlaag_id, symbol_name=NEW.symbol_name, bouwlaag=NEW.bouwlaag
			WHERE werkvoorraad_vlak.id = NEW.id;
			IF NOT ST_Equals(new.geom, old.geom) THEN
                INSERT INTO mobiel.werkvoorraad_hulplijnen (geom, bron_id, brontabel, bouwlaag) 
                    VALUES (ST_MakeLine(ST_Centroid(old.geom), ST_Centroid(new.geom)), old.bron_id, new.brontabel, new.bouwlaag);
			END IF;
	    ELSE
			UPDATE mobiel.werkvoorraad_vlak
			SET geom=NEW.geom, waarden_new=NEW.waarden_new, operatie=NEW.operatie, brontabel=NEW.brontabel, bron_id=old.bron_id, 
				object_id=NEW.object_id, bouwlaag_id=NEW.bouwlaag_id, symbol_name=NEW.symbol_name, bouwlaag=NEW.bouwlaag
			WHERE werkvoorraad_vlak.id = NEW.id;
			IF NOT ST_Equals(new.geom, old.geom) THEN
                INSERT INTO mobiel.werkvoorraad_hulplijnen (geom, bron_id, brontabel, bouwlaag) 
                    VALUES (ST_MakeLine(ST_Centroid(old.geom), ST_Centroid(new.geom)), old.bron_id, new.brontabel, new.bouwlaag);
			END IF;
	    END IF;
	    RETURN NULL;
    END;
$function$
;

CREATE OR REPLACE FUNCTION mobiel.funct_vlak_delete()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
    BEGIN 
	    IF OLD.bron = 'oiv' THEN
			INSERT INTO mobiel.werkvoorraad_vlak (geom, waarden_new, operatie, brontabel, bron_id, bouwlaag_id, symbol_name, bouwlaag, accepted)
  			VALUES (old.geom, old.waarden_new, 'DELETE', old.brontabel, old.id, old.bouwlaag_id, old.symbol_name, old.bouwlaag, false);
  		
			UPDATE mobiel.werkvoorraad_vlak
			SET geom=old.geom, waarden_new=old.waarden_new, operatie=old.operatie, brontabel=old.brontabel, bron_id=old.id, 
				object_id=old.object_id, bouwlaag_id=old.bouwlaag_id, symbol_name=old.symbol_name, bouwlaag=old.bouwlaag
			WHERE werkvoorraad_vlak.id = old.id;
	    ELSE
			DELETE FROM mobiel.werkvoorraad_vlak WHERE (id = OLD.id);
	    END IF;
	    RETURN NULL;
    END;
$function$
;

CREATE or replace TRIGGER trg_set_insert BEFORE
INSERT
    ON
    mobiel.werkvoorraad_vlak FOR EACH ROW EXECUTE FUNCTION objecten.set_timestamp('datum_aangemaakt');

CREATE or replace TRIGGER trg_set_upd BEFORE
INSERT
    ON
    mobiel.werkvoorraad_vlak FOR EACH ROW EXECUTE FUNCTION objecten.set_timestamp('datum_gewijzigd');
    
CREATE or replace TRIGGER trg_after_insert AFTER
INSERT
    ON
    mobiel.werkvoorraad_vlak FOR EACH ROW EXECUTE FUNCTION mobiel.complement_record_vlak();

CREATE OR REPLACE VIEW mobiel.vlakken
AS SELECT row_number() OVER (ORDER BY sub.id) AS id,
    sub.geom,
    sub.waarden_new,
    sub.operatie,
    sub.brontabel,
    sub.bron_id,
    sub.object_id,
    sub.bouwlaag_id,
    sub.symbol_name,
    sub.bouwlaag,
    sub.bron,
    sub.binnen_buiten
   FROM ( 
	SELECT id, geom, waarden_new, operatie, brontabel, bron_id, object_id, bouwlaag_id, symbol_name, bouwlaag, 'werkvoorraad' AS bron, '' AS binnen_buiten
	FROM mobiel.werkvoorraad_vlak
UNION ALL
	SELECT b.id, geom, row_to_json((SELECT d FROM (SELECT omschrijving) d)) AS waarden_new, '', 'sectoren', b.id, object_id, NULL AS bouwlaag_id, soort, NULL AS bouwlaag,
    'oiv'::text AS bron, 'object'::text AS binnen_buiten
	FROM objecten.sectoren b
	INNER JOIN objecten.sectoren_type bt ON b.soort = bt.naam
  WHERE b.datum_deleted IS NULL
UNION ALL
	SELECT b.id, b.geom, row_to_json((SELECT d FROM (SELECT omschrijving) d)) AS waarden_new, '', 'ruimten', b.id, NULL AS object_id, b.bouwlaag_id, b.ruimten_type_id, bl.bouwlaag,
    'oiv'::text AS bron, 'bouwlaag'::text AS binnen_buiten
	FROM objecten.ruimten b
	inner join objecten.bouwlagen bl on b.bouwlaag_id = bl.id
	INNER JOIN objecten.ruimten_type bt ON b.ruimten_type_id = bt.naam
  WHERE b.datum_deleted IS NULL
   ) sub;

CREATE OR REPLACE RULE vlakken_ins AS ON INSERT TO mobiel.vlakken
	DO INSTEAD
       INSERT INTO mobiel.werkvoorraad_vlak (geom, waarden_new, operatie, brontabel, bron_id, object_id, bouwlaag_id, 
	   				symbol_name, bouwlaag, accepted, bouwlaag_object)
       VALUES (new.geom, NEW.waarden_new, 'INSERT', new.brontabel, new.bron_id, NEW.object_id, new.bouwlaag_id, 
	   				new.symbol_name, new.bouwlaag, false, new.binnen_buiten);

CREATE TRIGGER trg_vlakken_del INSTEAD OF
DELETE
    ON
    mobiel.vlakken  FOR EACH ROW EXECUTE FUNCTION mobiel.funct_vlak_delete();

CREATE TRIGGER trg_vlakken_upd INSTEAD OF
UPDATE
    ON
    mobiel.vlakken FOR EACH ROW EXECUTE FUNCTION mobiel.funct_vlak_update();

CREATE OR REPLACE VIEW mobiel.categorie_vlakken
AS SELECT DISTINCT vlakken_type.categorie, vlakken_type.brontabel, bouwlaag_object FROM mobiel.vlakken_type;

CREATE OR REPLACE VIEW mobiel.werkvoorraad_objecten
AS SELECT DISTINCT o.id,
    o.geom,
    sub.object_id
   FROM (SELECT DISTINCT werkvoorraad_punt.object_id
           FROM mobiel.werkvoorraad_punt WHERE object_id IS NOT NULL
        UNION
         SELECT DISTINCT werkvoorraad_label.object_id
           FROM mobiel.werkvoorraad_label WHERE object_id IS NOT NULL
        UNION
         SELECT DISTINCT werkvoorraad_lijn.object_id
           FROM mobiel.werkvoorraad_lijn WHERE object_id IS NOT NULL
        UNION
         SELECT DISTINCT werkvoorraad_vlak.object_id
           FROM mobiel.werkvoorraad_vlak WHERE object_id IS NOT NULL
        UNION
   		 SELECT DISTINCT t.object_id
           FROM mobiel.werkvoorraad_punt w
           INNER JOIN objecten.bouwlagen b ON w.bouwlaag_id = b.id
           INNER JOIN objecten.terrein t ON ST_INTERSECTS(b.geom, t.geom)
           WHERE bouwlaag_id IS NOT NULL
        UNION
   		 SELECT DISTINCT t.object_id
           FROM mobiel.werkvoorraad_label w
           INNER JOIN objecten.bouwlagen b ON w.bouwlaag_id = b.id
           INNER JOIN objecten.terrein t ON ST_INTERSECTS(b.geom, t.geom)
           WHERE bouwlaag_id IS NOT NULL
        UNION
   		 SELECT DISTINCT t.object_id
           FROM mobiel.werkvoorraad_lijn w
           INNER JOIN objecten.bouwlagen b ON w.bouwlaag_id = b.id
           INNER JOIN objecten.terrein t ON ST_INTERSECTS(b.geom, t.geom)
           WHERE bouwlaag_id IS NOT NULL
        UNION
   		 SELECT DISTINCT t.object_id
           FROM mobiel.werkvoorraad_vlak w
           INNER JOIN objecten.bouwlagen b ON w.bouwlaag_id = b.id
           INNER JOIN objecten.terrein t ON ST_INTERSECTS(b.geom, t.geom)
           WHERE bouwlaag_id IS NOT NULL
        ) sub
     JOIN objecten.object o ON sub.object_id = o.id;

-- Update versie van de applicatie
UPDATE algemeen.applicatie SET sub = 4;
UPDATE algemeen.applicatie SET revisie = 3;
UPDATE algemeen.applicatie SET db_versie = 343; -- db versie == versie_sub_revisie
UPDATE algemeen.applicatie SET datum = now();
